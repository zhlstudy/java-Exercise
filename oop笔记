（oop）面向对象： 三大特征：封装、继承、多态
       1.概念：对现实世界的一种抽象，一切有形的无形的能够感知到的事务统称为对象，每个对象都有自己的类，
               在Java中，jdk提供了一些常用类，比如：String Scanner、Random、Jpanel、Timer等等
               面对一些具体业务比如俄罗斯方块，需要用面向对象的思想去在程序中构建相关的类与对象，使程序具备
               可读性、拓展性、可维护性。在某些需求开发方面要借助Java提供的类来完成，比如BufferImage对象将图片贴到
               方块上，让俄罗斯可视化。
       2.修饰符：用变量，方法、类名前
                     <-大——————访问范围————————————小->
         位置       public   protected   空(默认)   private

         同类        Y          Y         Y          Y
         同包        Y          Y         Y          N
         不同包子类   Y          Y         N          N
         不同包非子类 Y          N         N          N

         类上面可以用的修饰符： public   protected   空(默认)   private
                          内部类四种都可以，普通类中能是  空(默认) 和public

       3.关键字： static(静态) ,用于修饰变量、方法(类名直接调用)、代码块（类加载的时候执行）。
                 super(),调用父类的构造方法
                 final，一般修饰不可改变的常量，

       3.1 继承：   只存在两个有继承关系的类之间。
                    如果子类继承父类。子类重写父类的方法时，子类方法的访问修饰符
                    不得低于被重写的父类方法的访问修饰符。

       3.2 重写：
                   子类中的方法必须与父类中的方法具有相同名称。
                   子类中的方法必须具有相同的参数列表（参数类型、顺序和数量）
                   子类中的方法返回值类型可以是父类方法返回类型的子类型
                   子类中的方法不能缩小父类方法中的访问权限，不能更加严格，可以扩大权限
       3.3 重载：
                   方法重载指的是同一个类中定义多个同名但参数列表不同的方法，在
                   调用这个方法时，编译器会根据参数类型和数量确定调用哪个方法。
       3.4 向上转型&向下转型：
                   向上转型： 将一个子类对象转换为父类类型，这是一个隐式转换过程，不需要显示进行类型转换
                   向下转型： 将一个父类对象转换为子类类型，需要使用强制类型转换符进行转换

       3.5 多态性： Java对象的类型可以分为编译类型和运行类型
                    1.编译类型和运行类型可以不一致
                    2.编译类型定义对象时就确定，运行类型可以变化。
                    3.编译类型取决于定义对象时=号左边，运行类型却决于=号右边。
                      使用多态调用方法，先检查父类是否有该方法，如果没有会产生编译错误
                      如果有，调用子类的同名方法，编译时候却决于父类，运行时却决于子类
                    多态存在的必要条件：
                        1.继承，多态发生在继承关系中，必须存在有继承关系的父子类中，多态建立在封装、继承基础上
                        2.重写，必须有方法的重写，子类对父类的某些方法重新定义
                        3.向上转型，父类引用指向子类对象，只有这样引用既能调用父类方法，又能调用子类方法

       3.6 接口： 偏向于行为的抽象

       4.数组：
            4.1、一维数组：
                       1）创建数组
                              int[] arry1=new int[5]  5表示长度
                              int[] arry1={1，2，3，4，5}  5表示长度
                              int[] arry1=new int{1，2，3，4，5}  5表示长度
                       2）数组迭代
                              for（int i=0;i<arry.length;i++）{
                                     arry[i]
                              }
                              for(int x：arry){
                                    System.out.plant(x)
                              }
                              输出数组的字符串形式：
                                Arrays.toString(arry)
                       3）数组常用方法
            4.2、二维数组：

oop&设计模式
OOP： 通过封装、继承、多态，把程序的耦合度降低，使程序灵活、容易修改&复用。
    oop=对象+类+继承+多态
      面向对象的方法是一种把面向对象的思想用于软件开发过程，指导开发活动的系统
      方法，包括分析、设计和实现

      敏捷：
           1）思路先行，思路梳理记录
           2）实现随后。
                   a.可维护性：预见需求（甚至多年后的往事）
                   b.可重用性：代码可重用（最低级别），粒度：方法\类\包\组件(类库)
                   c.设计重用：框架、产品（开发软件）、算法、设计模式
                   d.分析重用：文档、规范、标准
                   e.可扩展性：UML图
                                 E1 用例图：描述系统中那些用户可用的功能
                                    逻辑图：将问题中的一些名词提出来，形成系统中对应的类，表示之间的关系
                                    过程图：系统对象交互
                                    实现图：系统中组件与组件的交互
                                    部署图：软件系统真是运行过程的物理描述

面向对象的7大基本原则
         程序设计：没有最好，只有合适，寻找平衡点。
         原则1：
                  替换原则(LSP)：父类出现的地方子类都可以出现
                                子类或实现类与父类都可以交互
                                子类不能添加任何父类没有的附加约束
                                子类对象必须可以代替父类对象
                  开闭原则(OCP)：要关联抽象，不要关联具体，抽象可扩展，
                                扩展是开放的，更改是封闭的。
                  单一职责(SRP)：信奈不同的具体类，不要将不相关的方法做到一个具体类中
                                然后具体类在关联，
                                一个类应该仅有一个引起它变化发原因，当需求变化，该变化会反映为类的职责变化
                  接口隔离(ISP)：具体类不要实现无关接口中的方法应使用具体类实现多个接口避免肥接口，
                                以一个类实现多个接口而客户仅仅获得必须接口本质
                                使用多个专用接口比适应单一的接口好
                                一个类对应另一个类的依赖性应当最小化
                                避免接口污染
                  依赖倒置原则：
                                高层依赖于抽象，底层继承，实现于抽象
                                高层模块不应依赖于底层模块，二者都应该依赖于抽象细节以来于抽象，抽象依赖于细节
                  组合聚合复用原则：
                                尽量使用组合、聚合，而不是使用继承来达到复合用目的，
                                继承的缺点：带来不必要的方法
                  迪米特法则：
                                类之间最少通信原则，采用中间类。
                                一个对象或模块应该和其他对象和模块尽量少的通信



         设计模式： 针对某一类问题，前人总结出来的最优解。
                 1.单列模式：
                             当多个对象需要共享同一个对象时
                 2.原型模式：
                             对扩展开发，对修改关闭
                 3.工厂模式:  客户需要某个产品，能够根据客户要求取得产品给客户
                 4.状态模式：
                             当需要某个对象内部状态改变使用
                 5.装配模式：
                             当需要对某个对象动态添加新功能时，可以用
                 6.适配器模式：
                             只需要对接口中的一小部分方法重新定义，又不希望对接口中的所有方法实现
                 7.观察者模式：
                             当主题对象改变时，需要通知所有的观察者
                 8.命令模式：
                             将用户发出命令以对象模式传递，通过参数可改变命令对象的状态。
